//
//  HomePresenter.swift
//  BTCUSDOrderBook
//
//  Created by Vedran Burojevic on 24/08/2019.
//  Copyright (c) 2019 Caffeinated Code. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import RxSwift
import RxCocoa

final class HomePresenter {
    
    enum DataUpdate {
        case initial([OrderBook])
        case new(OrderBook)
    }

    // MARK: - Private properties -

    private unowned let view: HomeViewInterface
    private let wireframe: HomeWireframeInterface
    private let interactor: HomeInteractorInterface
    
    private let disposeBag = DisposeBag()

    // MARK: - Lifecycle -

    init(wireframe: HomeWireframeInterface, view: HomeViewInterface, interactor: HomeInteractorInterface) {
        self.wireframe = wireframe
        self.view = view
        self.interactor = interactor
        
        interactor.connect()
        handleDisconnection()
    }
    
    // MARK: - Private functions -
    
    private func headerItem() -> Driver<HomeHeaderViewItem> {
        return interactor
            .ticker
            .map { ("BTCUSD", $0) }
            .map(HomeHeaderViewItem.init)
            .asDriverOnErrorComplete()
    }
    
    private func orderBooks() -> Observable<[OrderBook]> {
        let snapshotOrderBooks = interactor
            .orderBookSnapshot
            .first()
            .asObservable()
            .compactMap { $0?.orderBooks }
            .map { DataUpdate.initial($0) }
        
        let newOrderBook = interactor
            .orderBookUpdate
            .map(OrderBook.init)
            .map { DataUpdate.new($0) }
        
        let orderBooks = Observable
            .merge(snapshotOrderBooks, newOrderBook)
            .scan([]) { (previous, dataUpdate) -> [OrderBook] in
                switch dataUpdate {
                case let .initial(orderBooks):
                    return orderBooks
                case let .new(orderBook):
                    return Array(([orderBook] + previous).prefix(100))
                }
            }
        
        return orderBooks
    }
    
    private func cellItems() -> Driver<[HomeCellItem]> {
        return orderBooks()
            .map { orderBooks in
                let buyOrderBooks = orderBooks.filter { $0.amount >= 0 }
                let sellOrderBooks = orderBooks.filter { $0.amount < 0 }
                
                return zip(buyOrderBooks, sellOrderBooks)
                    .map(HomeCellItem.init)
            }
            .asDriver(onErrorJustReturn: [])
    }
    
    private func handleDisconnection() {
        interactor
            .isConnected
            .filter { $0 == false }
            .flatMap { [unowned wireframe] _ in wireframe.rxShowAlert(withTitle: nil, message: Strings.networkErrorMessage.localized, buttonTitles: [Strings.cancel.localized, Strings.retry.localized], preferredStyle: .alert) }
            .filter { $0 == 1 }
            .subscribe(onNext: { [unowned interactor] _ in interactor.connect() })
            .disposed(by: disposeBag)
    }
    
}

// MARK: - Extensions -

extension HomePresenter: HomePresenterInterface {
    
    func setup(with output: HomeViewOutput) -> HomeViewInput {
        // Header item
        let headerItem = self.headerItem()
        
        // Is header data loading
        let isHeaderDataLoading = headerItem
            .mapTo(false)
            .startWith(true)
            .distinctUntilChanged()
        
        // Cell items
        let cellItems = self.cellItems()
        
        // Is table data loading
        let isTableDataLoading = cellItems
            .mapTo(false)
            .startWith(true)
            .distinctUntilChanged()
        
        return HomeViewInput(headerItem: headerItem, isHeaderIndicatorAnimating: isHeaderDataLoading, isHeaderHidden: isHeaderDataLoading, cellItems: cellItems, isTableIndicatorAnimating: isTableDataLoading, isTableHidden: isTableDataLoading)
    }
    
}
